Index: src/slimaudio/slimaudio_output.c
===================================================================
--- src/slimaudio/slimaudio_output.c.old	(revision 18483)
+++ src/slimaudio/slimaudio_output.c	(working copy)
@@ -44,9 +44,17 @@
 
 static void *output_thread(void *ptr);
 
-static int pa_callback(  void *inputBuffer, void *outputBuffer,
+/*
+ * Alex Samad Quick hack
+ * static int pa_callback(  void *inputBuffer, void *outputBuffer,
+ *                   unsigned long framesPerBuffer,
+ *                   PaTimestamp outTime, void *userData );
+*/
+
+static int pa_callback(  const void *inputBuffer, void *outputBuffer,
                      unsigned long framesPerBuffer,
-                     PaTimestamp outTime, void *userData );
+                     const PaStreamCallbackTimeInfo * callbackTime,
+					 PaStreamCallbackFlags statusFlags, void *userData );
 
 
 static int audg_callback(slimproto_t *p, const unsigned char *buf, int buf_len, void *user_data);
@@ -62,7 +70,11 @@
 	}	
 	DEBUGF("slimaudio_output_init: PortAudio initialised\n");
 	
-	audio->num_device_names = Pa_CountDevices();
+	/*
+     * alex samad
+     * audio->num_device_names = Pa_CountDevices();
+     */
+	audio->num_device_names = Pa_GetDeviceCount();
 	audio->device_names = (char **)malloc(sizeof(char *) * audio->num_device_names);
 	
 	const PaDeviceInfo *pdi;
@@ -71,7 +83,12 @@
 		audio->device_names[i] = strdup(pdi->name);
 	}
 
-	audio->output_device_id = Pa_GetDefaultOutputDeviceID();
+	/*
+     * alex samad
+     * 	audio->output_device_id = Pa_GetDefaultOutputDeviceID();
+     */
+
+	audio->output_device_id = Pa_GetDefaultOutputDevice();
 	audio->px_mixer = NULL;
 	audio->volume_control = VOLUME_DRIVER;
 	audio->volume = 1.F;
@@ -167,22 +184,61 @@
 	slimaudio_t *audio = (slimaudio_t *) ptr;
 	audio->output_STMu = false;
 	audio->output_STMs = false;
+//	/*
+//	 * Alex samad
+//	err = Pa_OpenStream(	&audio->pa_stream,	// stream
+//				paNoDevice,		// input device
+//				0,			// input channels
+//				0,			// input sample format
+//				NULL,			// input driver info
+//				audio->output_device_id,// output device				
+//				2,			// output channels
+//				paInt16,		// output sample format
+//				NULL,			// output driver info
+//				44100,			// sample rate
+//				256,			// frames per buffer
+//				0,			// number of buffers
+//				0,			// stream flags
+//				pa_callback,		// callback
+//				audio);			// user data
+//	*/
 
-	err = Pa_OpenStream(	&audio->pa_stream,	// stream
-				paNoDevice,		// input device
-				0,			// input channels
-				0,			// input sample format
-				NULL,			// input driver info
-				audio->output_device_id,// output device				
-				2,			// output channels
-				paInt16,		// output sample format
-				NULL,			// output driver info
-				44100,			// sample rate
-				256,			// frames per buffer
-				0,			// number of buffers
-				0,			// stream flags
-				pa_callback,		// callback
-				audio);			// user data
+	PaStreamParameters inputParameters;
+	PaStreamParameters outputParameters;
+	const PaDeviceInfo * paDeviceInfo;
+
+
+	paDeviceInfo = Pa_GetDeviceInfo(audio->output_device_id);
+	
+
+	inputParameters.device = paNoDevice;
+	inputParameters.channelCount = 2;
+	inputParameters.sampleFormat = paInt16;
+	inputParameters.suggestedLatency = 0;
+	inputParameters.hostApiSpecificStreamInfo = NULL;
+
+	outputParameters.device = audio->output_device_id;
+	outputParameters.channelCount = paDeviceInfo->maxOutputChannels >=2? 2 : paDeviceInfo->maxOutputChannels;
+	outputParameters.sampleFormat = paInt16;
+	outputParameters.suggestedLatency = paDeviceInfo->defaultLowOutputLatency;
+	outputParameters.hostApiSpecificStreamInfo = NULL;
+
+	DEBUGF("paDeviceInfo->maxOutputChannels %i\n", paDeviceInfo->maxOutputChannels);
+	DEBUGF("paDeviceInfo->defaultHighOutputLatency %i\n", (int) paDeviceInfo->defaultHighOutputLatency);
+	DEBUGF("paDeviceInfo->defaultLowhOutputLatency %i\n", (int) paDeviceInfo->defaultLowOutputLatency);
+	DEBUGF("paDeviceInfo->defaultSampleRate %f\n", paDeviceInfo->defaultSampleRate);
+
+
+	err = Pa_OpenStream	(	&audio->pa_stream,	// stream
+				NULL,							// inputParameters
+				&outputParameters,				// outputParameters
+				44100,							// sample rate 
+				256,							// framesPerBuffer
+				0,								// streamFlags
+				pa_callback,					// streamCallback
+				audio							// userData	 
+	);
+
 	if (err != paNoError) {
 		printf("output_thread: PortAudio error1: %s\n", Pa_GetErrorText(err) );	
 		exit(-1);
@@ -266,7 +322,11 @@
 				}
 
 				slimaudio_buffer_set_readopt(audio->output_buffer, BUFFER_NONBLOCKING);
-				audio->pa_streamtime_offset = Pa_StreamTime(audio->pa_stream);
+				/*
+ 				* alex samad
+ 				*  audio->pa_streamtime_offset = Pa_StreamTime(audio->pa_stream);
+ 				*/
+				audio->pa_streamtime_offset = Pa_GetStreamTime(audio->pa_stream);
 
 				audio->output_state = PLAYING;
 				pthread_cond_broadcast(&audio->output_cond);
@@ -290,7 +350,11 @@
 					
 				if (audio->output_STMs) {
 					audio->output_STMs = false;
-					audio->pa_streamtime_offset = Pa_StreamTime(audio->pa_stream);
+					/*
+					 * alex samad
+					 * audio->pa_streamtime_offset = Pa_StreamTime(audio->pa_stream);
+					 */
+					audio->pa_streamtime_offset = Pa_GetStreamTime(audio->pa_stream);
 					output_thread_stat(audio, "STMs");
 				}
 
@@ -448,7 +512,11 @@
 	if (audio->output_state != PLAYING)
 		return 0;
 		
-	PaTimestamp numSamples = Pa_StreamTime(audio->pa_stream);
+	/*
+	 * alex samad
+	 * PaTimestamp numSamples = Pa_StreamTime(audio->pa_stream);
+	*/
+	PaTime numSamples = Pa_GetStreamTime(audio->pa_stream);
 	const int msec =
 		(int)((numSamples - audio->pa_streamtime_offset) / 44.100) +
 		audio->output_predelay_msec;
@@ -546,9 +614,18 @@
 	return predelayBytes;
 }
 
-static int pa_callback(void *inputBuffer, void *outputBuffer,
+
+/*
+ * 	Alex Samad Quick Hack
+ * static int pa_callback(void *inputBuffer, void *outputBuffer,
 			unsigned long framesPerBuffer,
 			PaTimestamp outTime, void *userData)
+*/
+
+static int pa_callback(  const void *inputBuffer, void *outputBuffer,
+                     unsigned long framesPerBuffer,
+                     const PaStreamCallbackTimeInfo * callbackTime,
+					 PaStreamCallbackFlags statusFlags, void *userData )
 {
 	slimaudio_t * const audio = (slimaudio_t *) userData;
 
Index: src/slimaudio/slimaudio.h
===================================================================
--- src/slimaudio/slimaudio.h.old	(revision 18483)
+++ src/slimaudio/slimaudio.h	(working copy)
@@ -82,7 +82,7 @@
 	pthread_cond_t output_cond;
 	
 	slimaudio_output_state_t output_state;
-	PortAudioStream *pa_stream;
+	PaStream *pa_stream; // PortAudioStream *pa_stream;
 	slimaudio_volume_t volume_control;
 	float volume;
 	float prev_volume;
@@ -90,13 +90,18 @@
 	unsigned int output_predelay_frames;
 	unsigned int output_predelay_amplitude;
 	PxMixer *px_mixer;
-	PaTimestamp pa_streamtime_offset;
+	PaTime pa_streamtime_offset; //PaTimestamp pa_streamtime_offset;
 	bool output_STMs;
 	bool output_STMu;
 	int keepalive_interval;
 	
-	int output_device_id;
-	int num_device_names;
+	/*
+     * alex samad
+	 * int output_device_id;
+     *  int num_device_names;
+     */
+	PaDeviceIndex output_device_id;
+	PaDeviceIndex num_device_names;
 	char **device_names;	
 	
 	// mad decoder
