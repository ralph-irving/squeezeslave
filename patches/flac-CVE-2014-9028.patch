Description: fix arbitrary code execution via crafted .flac file
Origin: upstream, https://git.xiph.org/?p=flac.git;a=commit;h=fcf0ba06ae12ccd7c67cee3c8d948df15f946b85
Origin: upstream, https://git.xiph.org/?p=flac.git;a=commit;h=5a365996d739bdf4711af51d9c2c71c8a5e14660
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=770918

Index: flac-1.2.1/src/libFLAC/stream_decoder.c
===================================================================
--- flac-1.2.1.orig/src/libFLAC/stream_decoder.c	2014-11-27 12:27:16.213500173 -0500
+++ flac-1.2.1/src/libFLAC/stream_decoder.c	2014-11-27 12:27:16.209500152 -0500
@@ -2730,14 +2730,16 @@
 		if(decoder->private_->frame.header.blocksize < predictor_order) {
 			send_error_to_client_(decoder, FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC);
 			decoder->protected_->state = FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC;
-			return true;
+			/* We have received a potentially malicious bt stream. All we can do is error out to avoid a heap overflow. */
+			return false;
 		}
 	}
 	else {
 		if(partition_samples < predictor_order) {
 			send_error_to_client_(decoder, FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC);
 			decoder->protected_->state = FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC;
-			return true;
+			/* We have received a potentially malicious bit stream. All we can do is error out to avoid a heap overflow. */
+			return false;
 		}
 	}
 
