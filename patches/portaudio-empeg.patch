Index: portaudio/pa_unix_oss/pa_unix_oss.c
===================================================================
--- portaudio/pa_unix_oss/pa_unix_oss.c	(revision 263)
+++ portaudio/pa_unix_oss/pa_unix_oss.c	(working copy)
@@ -73,14 +73,7 @@
 {
     int result = paHostError;
     int tempDevHandle;
-    int numChannels, maxNumChannels;
-    int format;
-    int numSampleRates;
-    int sampleRate;
-    int numRatesToTry;
-    int lastRate;
-    int ratesToTry[9] = {96000, 48000, 44100, 32000, 24000, 22050, 16000, 11025, 8000};
-    int i;
+    int maxNumChannels;
 
     /* douglas:
      we have to do this querying in a slightly different order. apparently
@@ -96,69 +89,18 @@
     }
 
     /*  Ask OSS what formats are supported by the hardware. */
-    pad->pad_Info.nativeSampleFormats = 0;
+    pad->pad_Info.nativeSampleFormats = paInt16;
 
-    if (ioctl(tempDevHandle, SNDCTL_DSP_GETFMTS, &format) == -1)
-    {
-        ERR_RPT(("Pa_QueryDevice: could not get format info\n" ));
-        goto error;
-    }
-    if( format & AFMT_U8 )     pad->pad_Info.nativeSampleFormats |= paUInt8;
-    if( format & AFMT_S16_NE ) pad->pad_Info.nativeSampleFormats |= paInt16;
-
     /* Negotiate for the maximum number of channels for this device. PLB20010927
      * Consider up to 16 as the upper number of channels.
      * Variable numChannels should contain the actual upper limit after the call.
      * Thanks to John Lazzaro and Heiko Purnhagen for suggestions.
      */
-    maxNumChannels = 0;
-    for( numChannels = 1; numChannels <= 16; numChannels++ )
-    {
-        int temp = numChannels;
-        DBUG(("Pa_QueryDevice: use SNDCTL_DSP_CHANNELS, numChannels = %d\n", numChannels ))
-        if(ioctl(tempDevHandle, SNDCTL_DSP_CHANNELS, &temp) < 0 )
-        {
-            /* ioctl() failed so bail out if we already have stereo */
-            if( numChannels > 2 ) break;
-        }
-        else
-        {
-            /* ioctl() worked but bail out if it does not support numChannels.
-             * We don't want to leave gaps in the numChannels supported.
-             */
-            if( (numChannels > 2) && (temp != numChannels) ) break;
-            DBUG(("Pa_QueryDevice: temp = %d\n", temp ))
-            if( temp > maxNumChannels ) maxNumChannels = temp; /* Save maximum. */
-        }
-    }
+    maxNumChannels = 2;
 
-    /* The above negotiation may fail for an old driver so try this older technique. */
-    if( maxNumChannels < 1 )
-    {
-        int stereo = 1;
-        if(ioctl(tempDevHandle, SNDCTL_DSP_STEREO, &stereo) < 0)
-        {
-            maxNumChannels = 1;
-        }
-        else
-        {
-            maxNumChannels = (stereo) ? 2 : 1;
-        }
-        DBUG(("Pa_QueryDevice: use SNDCTL_DSP_STEREO, maxNumChannels = %d\n", maxNumChannels ))
-    }
-
     pad->pad_Info.maxOutputChannels = maxNumChannels;
     DBUG(("Pa_QueryDevice: maxNumChannels = %d\n", maxNumChannels))
 
-    /* During channel negotiation, the last ioctl() may have failed. This can
-     * also cause sample rate negotiation to fail. Hence the following, to return
-     * to a supported number of channels. SG20011005 */
-    {
-        int temp = maxNumChannels;
-        if( temp > 2 ) temp = 2; /* use most reasonable default value */
-        ioctl(tempDevHandle, SNDCTL_DSP_CHANNELS, &temp);
-    }
-
     /* FIXME - for now, assume maxInputChannels = maxOutputChannels.
      *    Eventually do separate queries for O_WRONLY and O_RDONLY
     */
@@ -171,46 +113,15 @@
     /* Determine available sample rates by trying each one and seeing result.
      * OSS often supports funky rates such as 44188 instead of 44100!
      */
-    numSampleRates = 0;
-    lastRate = 0;
-    numRatesToTry = sizeof(ratesToTry)/sizeof(int);
-    for (i = 0; i < numRatesToTry; i++)
-    {
-        sampleRate = ratesToTry[i];
+    pad->pad_SampleRates[0] = 44100;
 
-        if (ioctl(tempDevHandle, SNDCTL_DSP_SPEED, &sampleRate) >= 0 ) /* PLB20010817 */
-        {
-            /* Use whatever rate OSS tells us. PLB20021018 */
-            if (sampleRate != lastRate)
-            {
-                DBUG(("Pa_QueryDevice: adding sample rate: %d\n", sampleRate))
-                pad->pad_SampleRates[numSampleRates] = (float)sampleRate;
-                numSampleRates++;
-                lastRate = sampleRate;
-            }
-            else
-            {
-                DBUG(("Pa_QueryDevice: dang - got sample rate %d again!\n", sampleRate))
-            }
-        }
-    }
-
-    DBUG(("Pa_QueryDevice: final numSampleRates = %d\n", numSampleRates))
-    if (numSampleRates==0)   /* HP20010922 */
-    {
-        /* Desparate attempt to keep running even though no good rates found! */
-        ERR_RPT(("Pa_QueryDevice: no supported sample rate (or SNDCTL_DSP_SPEED ioctl call failed). Force 44100 Hz\n" ));
-        pad->pad_SampleRates[numSampleRates++] = 44100;
-    }
-
-    pad->pad_Info.numSampleRates = numSampleRates;
+    pad->pad_Info.numSampleRates = 1;
     pad->pad_Info.sampleRates = pad->pad_SampleRates; /* use pointer to embedded array */
 
     pad->pad_Info.name = deviceName;
 
     result = paNoError;
 
-error:
     /* We MUST close the handle here or we won't be able to reopen it later!!!  */
     close(tempDevHandle);
 
@@ -220,60 +131,7 @@
 /*******************************************************************************************/
 PaError Pa_SetupDeviceFormat( int devHandle, int numChannels, int sampleRate )
 {
-    PaError result = paNoError;
-    int     tmp;
-
-    /* Set format, channels, and rate in this order to keep OSS happy. */
-    /* Set data format. FIXME - handle more native formats. */
-    tmp = AFMT_S16_NE;
-    if( ioctl(devHandle,SNDCTL_DSP_SETFMT,&tmp) == -1)
-    {
-        ERR_RPT(("Pa_SetupDeviceFormat: could not SNDCTL_DSP_SETFMT\n" ));
-        return paHostError;
-    }
-    if( tmp != AFMT_S16_NE )
-    {
-        ERR_RPT(("Pa_SetupDeviceFormat: HW does not support AFMT_S16_NE\n" ));
-        return paHostError;
-    }
-
-
-    /* Set number of channels. */
-    tmp = numChannels;
-    if (ioctl(devHandle, SNDCTL_DSP_CHANNELS, &numChannels) == -1)
-    {
-        ERR_RPT(("Pa_SetupDeviceFormat: could not SNDCTL_DSP_CHANNELS\n" ));
-        return paHostError;
-    }
-    if( tmp != numChannels)
-    {
-        ERR_RPT(("Pa_SetupDeviceFormat: HW does not support %d channels\n", numChannels ));
-        return paHostError;
-    }
-
-    /* Set playing frequency. */
-    tmp = sampleRate;
-    if( ioctl(devHandle,SNDCTL_DSP_SPEED,&tmp) == -1)
-    {
-        ERR_RPT(("Pa_SetupDeviceFormat: could not SNDCTL_DSP_SPEED\n" ));
-        return paHostError;
-    }
-    else if( tmp != sampleRate )
-    {
-        int percentError = abs( (100 * (sampleRate - tmp)) / sampleRate );
-        PRINT(("Pa_SetupDeviceFormat: warning - requested sample rate = %d Hz - closest = %d\n",
-            sampleRate, tmp ));
-        /* Allow sample rate within 10% off of requested rate. PLB20021018
-        * Sometimes OSS uses a funky rate like 44188 instead of 44100.
-        */
-        if( percentError > 10 )
-        {
-            ERR_RPT(("Pa_SetupDeviceFormat: HW does not support %d Hz sample rate\n",sampleRate ));
-           return paHostError;
-        }
-    }
-    
-    return result;
+    return paNoError;
 }
 
 PaError Pa_SetupOutputDeviceFormat( int devHandle, int numChannels, int sampleRate )
@@ -321,13 +179,6 @@
     /* Encode info into a single int */
     tmp=(numBuffers<<16) + powerOfTwo;
 
-    if(ioctl(devHandle,SNDCTL_DSP_SETFRAGMENT,&tmp) == -1)
-    {
-        ERR_RPT(("Pa_SetLatency: could not SNDCTL_DSP_SETFRAGMENT\n" ));
-        /* Don't return an error. Best to just continue and hope for the best. */
-        ERR_RPT(("Pa_SetLatency: numBuffers = %d, framesPerBuffer = %d, powerOfTwo = %d\n",
-                 numBuffers, framesPerBuffer, powerOfTwo ));
-    }
 }
 
 /***********************************************************************/
@@ -336,45 +187,23 @@
     internalPortAudioStream *past = (internalPortAudioStream *) stream;
     PaHostSoundControl *pahsc;
 
-    count_info    info;
-    int           delta;
-
     if( past == NULL ) return paBadStreamPtr;
     
     pahsc = (PaHostSoundControl *) past->past_DeviceData;
 
     if( pahsc->pahsc_NativeOutputBuffer )
     {
-       ioctl(pahsc->pahsc_OutputHandle, SNDCTL_DSP_GETOPTR, &info);
-       delta = (info.bytes - pahsc->pahsc_LastPosPtr);
-       return (pahsc->pahsc_LastStreamBytes + delta) / (past->past_NumOutputChannels * sizeof(short));
+       return (pahsc->pahsc_LastStreamBytes) / (past->past_NumOutputChannels * sizeof(short));
     }
     else
     {
-       ioctl(pahsc->pahsc_InputHandle, SNDCTL_DSP_GETIPTR, &info);
-       delta = (info.bytes - pahsc->pahsc_LastPosPtr);
-       return (pahsc->pahsc_LastStreamBytes + delta) / (past->past_NumInputChannels * sizeof(short));
+       return (pahsc->pahsc_LastStreamBytes) / (past->past_NumInputChannels * sizeof(short));
     }
 }
 
 void Pa_UpdateStreamTime(PaHostSoundControl *pahsc)
 {
-    count_info   info;
-    int          delta;
-
-  /* Update current stream time (using a double so that
-     we don't wrap around like info.bytes does) */
-  if( pahsc->pahsc_NativeOutputBuffer )
-  {
-    ioctl(pahsc->pahsc_OutputHandle, SNDCTL_DSP_GETOPTR, &info);
-  }
-  else
-  {
-    ioctl(pahsc->pahsc_InputHandle, SNDCTL_DSP_GETIPTR, &info);
-  }
-  delta = (info.bytes - pahsc->pahsc_LastPosPtr);
-  pahsc->pahsc_LastStreamBytes += delta;
-  pahsc->pahsc_LastPosPtr = info.bytes;
+
 }
 
 PaError Pa_FlushStream(int devHandle)
Index: portaudio/pa_unix_oss/pa_unix.h
===================================================================
--- portaudio/pa_unix_oss/pa_unix.h	(revision 263)
+++ portaudio/pa_unix_oss/pa_unix.h	(working copy)
@@ -82,11 +82,7 @@
 #define MAX_TIMEOUT_MSEC   (1000)
 
 /************************************************* Definitions ********/
-#ifdef __linux__
- #define DEVICE_NAME_BASE            "/dev/dsp"
-#else
  #define DEVICE_NAME_BASE            "/dev/audio"
-#endif
 
 #define MAX_CHARS_DEVNAME           (32)
 #define MAX_SAMPLE_RATES            (10)
