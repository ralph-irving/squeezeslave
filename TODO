I have been adding debuging information through squeezeslave to watch
the buffers and they seem okay the http-> decoder-> output.  I have
tried increasing them to no avail.

The place it blocks is writing to the decoder buffer (just read off
http and trying to write to decoders buffer.

I have let portaudio ask for the number of frames to transfer on its
call back and it seems to default to 1024 (it was hard coded as 256
before), I have tried placing this back again to no avail, there is
more buffer interaction, but the waits are still in the same place.

More investigations into this shows that read_buffer is not returning
eof when there's no data available in the http buffer, it blocks waiting
for http to get more but the trigger STMd is not being sent to get more
data as it relies on the decoder finishing.

---

Need to look at supporting skip in calculations as well.

---
http://forums.slimdevices.com/member.php?u=10044

I've just started to use SS (and find it great to use as a virtual Squeezebox on a PC, espec combined with Moose as a front-end) - however I spotted a few of these errors on the cmd window:

libmad: (mp3) decoding error (0x0101)
libmad: (mp3) decoding error (0x0101)
libmad: (mp3) decoding error (0x0238)

I'm running SS 0.8-25 on Vista/32. I'm afraid I've no idea though which tracks the errors correlate to since the SS window is minimised and I don't recall any major issues - possibly some minor sound glitches.

Any ideas what specifically I should be looking out for WRT mp3 files?

The 0x0101 (lost synchronization) error is returned by libmad when it fails to find the requisite sync word at the expected location in the bitstream. It usually indicates either (1) a corrupt bitstream, or (2) stream buffer mismanagement in your code. Since the error is fully recoverable, in the case of (1) the solution is simply to continue decoding.

In the case of (2), the most common problem is a failure to copy the unconsumed portion of the bitstream to the beginning of the new buffer after receiving MAD_ERROR_BUFLEN. However, madplay does this correctly, so if you are actually running madplay under ARM unmodified, this should not be a problem.

If the error occurs with any MP3 file, especially at the same frame index (at the same bitrate), then buffer management is definitely a likely culprit.

The 0x0238 error is a Huffman data overrun error. It happens when the actual big_values section of the bitstream occupies more space than was declared by the bitstream for it. This can happen because the Huffman code words are variable length and the actual length is learned implicitly during decoding.

Most often this is an indication of an error made by an encoder, but it's also possible to happen if there is an error in MAD's Huffman code tables or the process of reading them. As the Huffman table union initialization macros are subject to portability issues, this is a possible source of the problem if you get a lot of these errors.

> In file mad.h you have all the error codes:
>
>   MAD_ERROR_LOSTSYNC       = 0x0101,    /* lost synchronization */
>
> I'm quite new to MAD too but I've experienced this one
> already. You get this error when your input function
> places other than MPEG Audio frames in the MAD input
> buffer. I experienced this with some files that had
> some ID tags in the beginning of the file. I had to
> find the first frame (frame synchronization) and place
> *that* in the MAD input buffer. In other words, try to
> skip the something in the beginning of your file and
> make sure you always give MAD MPEG Audio frames only.

Just to clarify, libmad returns this error whenever it expected to find an 
MPEG audio sync word (marking the beginning of a frame) but found 
something else instead. It's mostly an informational error; when you call 
the decoding routine again it will automatically search for the next sync 
word in the stream and resynchronize.

There are two cases when libmad expects to find a sync word:

1. After a call to mad_stream_buffer(), a sync word is expected to be 
found at the beginning of the buffer.

2. After successfully decoding a frame header and calculating the frame's 
size, another sync word is expected immediately to follow the frame.

When this error is returned, stream->this_frame points to the place in the 
stream where a sync word was expected.

Usually this error is an indication that something else is in the 
bitstream, such as an ID3 tag. In this case you might call id3_tag_query() 
to see if it really is a tag and either read or skip it.

---

http://lists.apple.com/archives/macnetworkprog/2004/Mar/msg00021.html

Recv will return 0 *only* to indicate that the socket was cleanly closed
by the other end.

The correct way to find out the peer is disconnected.

OSX
/usr/include/sys/errno.h:#define   EWOULDBLOCK     EAGAIN          /* Operation would block */

n = recv(mSocket, &buffer, 1, MSG_PEEK);
if (n == -1)
if (errno == EWOULDBLOCK)
no data
else
other error handling
else if (n == 1)
data is available
else if (n == 0)
peer is disconnected

---

http://tangentsoft.net/wskfaq/articles/bsd-compatibility.html

Under BSD Unixes, if the remote peer closes its connection and your program is blocking on recv(), you will get a 0 back from recv(). Winsock behaves the same way, except that it can also return -1, with WSAGetLastError() returning WSAECONNRESET, WSAECONNABORTED or WSAESHUTDOWN, to signal the detectable flavors of abnormal disconnections.

Under Unix, if you\u2019re blocking on send() and your program is ignoring the SIGPIPE signal, it will return with a -1 when the remote peer disconnects, and errno will be EPIPE. Otherwise, your program will be sent the SIGPIPE signal, which will terminate your program if you don\u2019t handle it. Under Winsock, the SIGPIPE/EPIPE functionality does not exist at all: send() will either return 0 for a normal disconnect or -1 for an abnormal disconnect, with WSAGetLastError() returning the same errors as in the recv() discussion above.

---

http://www.cplusplus.com/forum/general/5304/

#define INFINITE (-1)

bool iskeypressed( unsigned timeout_ms = 0 )
  {
  struct pollfd pls[ 1 ];
  pls[ 0 ].fd     = STDIN_FILENO;
  pls[ 0 ].events = POLLIN | POLLPRI;
  return poll( pls, 1, timeout_ms ) > 0;
  }

For the equivalent to poll()ing the keyboard on Windows, use:

bool iskeypressed( unsigned timeout_ms = 0 )
  {
  return WaitForSingleObject(
    GetStdHandle( STD_INPUT_HANDLE ),
    timeout_ms
    ) == WAIT_OBJECT_0;
  }


<windows.h> #includes the necessary headers to #define INFINITE as the appropriate value, so this function can be
used identically to the one above.

---

Try playing with this:
#include <windows.h>
#include <stdio.h>

int main()
{
printf("->");
static HANDLE stdinHandle;
// Get the IO handles
// getc(stdin);
stdinHandle = GetStdHandle(STD_INPUT_HANDLE);

while (1)
{
DWORD rc = WaitForSingleObject(stdinHandle, 1000);

if( rc == WAIT_TIMEOUT )
{
printf("Timeout...");
}
else if( rc == WAIT_ABANDONED )
{
printf("WAIT_ABANDONED");
}
else if( rc == WAIT_OBJECT_0 )
{
printf("WAIT_OBJECT_0");
INPUT_RECORD r[512];
DWORD read;
ReadConsoleInput(stdinHandle, r, 512, &read);
printf("Read: %d", read);
}
else if( rc == WAIT_FAILED )
{
printf("Error:%d.", GetLastError());
}
}

return 0;
}

---

read() and recv() are interchangable...on sockets... But, on other non-socket FDs,
read() should be used... Lots of recv() semantics (MSG_OOB, MSG_PEEK, etc.) make
no sense with non-socket FDs... For socket FDs, read() is essentially the same thing
as recv() with flags of 0... But, I think you'll find that trying to use recv() on a non-socket
FD will result in failure with errno ENOTSOCK...

In short, read() works on anything (including sockets), but recv() (and relatives)
work only on sockets... 

---

File Descriptors And Multithreaded Programs
Putting the "rev" back in "revocation"
http://www.ddj.com/architect/212001285

---

Windows Sockets
An Open Interface for
Network Programming under
Microsoft Windows
http://www.sockets.com/winsock.htm#Deviation_Select

---

Fix 7.4 remote stream hang

7.4 r23955 initial branch  http://svn.slimdevices.com/slim/7.4/trunk/
7.4 r28672 reported broken http://forums.slimdevices.com/showthread.php?t=69338
http_recv (2): timesout after 5 minutes and retry loop reconnects successfully.

28008 good
28009 bad

------------------------------------------------------------------------
r28009 | adrian | 2009-08-03 09:38:28 -0400 (Mon, 03 Aug 2009) | 3 lines
 
Bug: 10085
Description: change fix for this bug to check if the callback is for the active streaming socket rather than just a connected socket.  When moving from one track using a pipeline to another it is possible for the new streaming connection to be created before the old one is closed, so make sure we only kill timers if we are the active socket.

------------------------------------------------------------------------
$ svn -r28008:28009 diff
Index: Slim/Web/HTTP.pm
===================================================================
--- Slim/Web/HTTP.pm    (revision 28008)
+++ Slim/Web/HTTP.pm    (revision 28009)
@@ -2176,11 +2176,11 @@
        my $client     = shift;
        my $httpClient = shift;
 
-       if ( $httpClient->connected() ) {
-
+       if ( $httpClient == $client->streamingsocket() ) {
+
                # Bug 10085 - This might be a callback for an old connection  
                # which we decided to close after establishing the timer, so
-               # only kill the timer if we were called for an active connection;
+               # only kill the timer if we were called for the active streaming connection;
                # otherwise we might kill the timer related to the next connection too.
                Slim::Utils::Timers::killTimers($client, \&tryStreamingLater);
------------------------------------------------------------------------
Fix from Adrian for r28009 change.  Not checked in as of March 16, 2010.

Index: Slim/Web/HTTP.pm
===================================================================
--- Slim/Web/HTTP.pm	(revision 30377)
+++ Slim/Web/HTTP.pm	(working copy)
@@ -2199,9 +2199,10 @@
 		# only kill the timer if we were called for the active streaming connection;
 		# otherwise we might kill the timer related to the next connection too.
 		Slim::Utils::Timers::killTimers($client, \&tryStreamingLater);
-		
-		Slim::Networking::Select::addWrite($httpClient, \&sendStreamingResponse, 1);
 	}
+
+	# Always call sendStreamingResponse so we ensure the socket gets closed
+	Slim::Networking::Select::addWrite($httpClient, \&sendStreamingResponse, 1);
 }
 
 sub forgetClient {
---

Investigate no audio after resume from sleep on windows 7 asio

---

Confirm STMf is still enabled

---

Win32 ASIO/WASAPI versions terminate at startup with the error 'Application failed to initialize 0xc00000022'
Windows permissions problem.  Google for the error, there's lots of information available.

---

Investigate buffering message remaining at 0% when starting remote streams.


[10-03-13 06:55:54.9399] Slim::Player::StreamingController::play (1954) 00:17:31:7b:88:7b
[10-03-13 06:55:54.9407] Slim::Player::Squeezebox::stream (980) strm-q
[10-03-13 06:55:54.9427] Slim::Player::StreamingController::_Stop (607) Song queue is now 0
[10-03-13 06:55:54.9432] Slim::Player::StreamingController::_setPlayingState (2222) new playing state STOPPED
[10-03-13 06:55:54.9436] Slim::Player::StreamingController::_setStreamingState (2235) new streaming state IDLE
[10-03-13 06:55:54.9445] Slim::Player::Song::new (107) index 0 -> http://dual:9100/O94.9/radio.ogg
[10-03-13 06:55:54.9450] Slim::Player::StreamingController::_setStreamingState (2235) new streaming state TRACKWAIT
[10-03-13 06:55:54.9456] Slim::Player::Song::getNextSong (228) http://dual:9100/O94.9/radio.ogg
[10-03-13 06:55:54.9461] Slim::Player::Song::getNextSong (250) scanning URL http://dual:9100/O94.9/radio.ogg
[10-03-13 06:55:54.9535] Slim::Player::StreamingController::_playersMessage (777) Getting stream info...: http://dual:9100/O94.9/radio.ogg
[10-03-13 06:55:54.9617] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMf: fullness=0, output_fullness=-1, elapsed=0.000
[10-03-13 06:55:55.3918] Slim::Player::Song::getNextSong (228) http://dual:9100/O94.9/radio.ogg
[10-03-13 06:55:55.3923] Slim::Player::StreamingController::_nextTrackReady (733) 00:17:31:7b:88:7b: nextTrack will be index 0
[10-03-13 06:55:55.3927] Slim::Player::StreamingController::_Stream (1160) Song queue is now 0
[10-03-13 06:55:55.3931] Slim::Player::StreamingController::_Stream (1163) 00:17:31:7b:88:7b: preparing to stream song index 0
[10-03-13 06:55:55.3935] Slim::Player::Song::open (362) http://dual:9100/O94.9/radio.ogg
[10-03-13 06:55:55.3954] Slim::Player::TranscodingHelper::getConvertCommand2 (430) Error: Didn't find any command matches for type: ogg
[10-03-13 06:55:55.3958] Slim::Player::Song::open (382) seek=false time=0 canSeek=0SEEK_ERROR_TYPE_NOT_SUPPORTEDogg
[10-03-13 06:55:55.3965] Slim::Player::TranscodingHelper::getConvertCommand2 (433) Matched: ogg->ogg via: -
[10-03-13 06:55:55.3969] Slim::Player::Song::open (403) Transcoder: streamMode=I, streamformat=ogg
[10-03-13 06:55:55.3973] Slim::Player::Song::open (451) Opening stream (no direct streaming) using Slim::Player::Protocols::HTTP [http://dual:9100/O94.9/radio.ogg]
[10-03-13 06:55:56.1791] Slim::Player::Song::open (472) URL is a song (audio): http://dual:9100/O94.9/radio.ogg, type=ogg
[10-03-13 06:55:56.1802] Slim::Player::StreamingController::_Stream (1214) 00:17:31:7b:88:7b: stream
[10-03-13 06:55:56.1827] Slim::Player::Squeezebox::stream_s (578) stream_s called: format: ogg url: http://dual:9100/O94.9/radio.ogg
[10-03-13 06:55:56.1833] Slim::Player::Squeezebox::stream_s (851) Starting decoder with format: o autostart: 1 threshold: 48 samplesize: ? samplerate: ? endian: ? channels: ?
[10-03-13 06:55:56.1847] Slim::Player::StreamingController::_Stream (1245) Song queue is now 0
[10-03-13 06:55:56.1852] Slim::Player::StreamingController::_setPlayingState (2222) new playing state BUFFERING
[10-03-13 06:55:56.1856] Slim::Player::StreamingController::_setStreamingState (2235) new streaming state STREAMING
[10-03-13 06:55:56.1882] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMc: fullness=0, output_fullness=-1, elapsed=0.000
[10-03-13 06:55:56.1941] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=-1, elapsed=0.000
[10-03-13 06:55:56.3191] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:56.3227] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=-1, elapsed=0.000
[10-03-13 06:55:56.6315] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:56.6352] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=-1, elapsed=0.000
[10-03-13 06:55:56.9357] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:56.9393] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=-1, elapsed=0.000
[10-03-13 06:55:57.1703] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=43776, elapsed=0.000
[10-03-13 06:55:57.2325] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:57.2362] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=43776, elapsed=0.000
[10-03-13 06:55:57.5303] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:57.5340] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=97024, elapsed=0.000
[10-03-13 06:55:57.8272] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:57.8308] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=141056, elapsed=0.000
[10-03-13 06:55:58.1338] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:58.1374] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=190208, elapsed=0.000
[10-03-13 06:55:58.1809] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=190208, elapsed=0.000
[10-03-13 06:55:58.4462] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:58.4496] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=240896, elapsed=0.000
[10-03-13 06:55:58.7518] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:58.7552] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=294144, elapsed=0.000
[10-03-13 06:55:59.0565] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:59.0599] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=343296, elapsed=0.000
[10-03-13 06:55:59.1816] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=388352, elapsed=0.000
[10-03-13 06:55:59.3688] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:59.3722] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=437504, elapsed=0.000
[10-03-13 06:55:59.6728] Slim::Player::Player::_buffering (1135) Buffering... 0 / 49152
[10-03-13 06:55:59.6762] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=488192, elapsed=0.000
[10-03-13 06:55:59.9250] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMs: fullness=0, output_fullness=533240, elapsed=0.000
[10-03-13 06:55:59.9254] Slim::Player::StreamingController::playerTrackStarted (2034) 00:17:31:7b:88:7b
[10-03-13 06:55:59.9259] Slim::Player::StreamingController::_setPlayingState (2222) new playing state PLAYING
[10-03-13 06:55:59.9263] Slim::Player::StreamingController::_Playing (361) Song 0 has now started playing
[10-03-13 06:55:59.9270] Slim::Player::StreamingController::_Playing (391) Song queue is now 0
[10-03-13 06:56:00.9484] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=501696, elapsed=0.985
[10-03-13 06:56:01.0047] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=491136, elapsed=1.045
[10-03-13 06:56:01.9459] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=527388, elapsed=1.973
[10-03-13 06:56:02.9518] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=541148, elapsed=2.991
[10-03-13 06:56:03.9629] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=509920, elapsed=3.980
[10-03-13 06:56:04.9628] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=521852, elapsed=5.004
[10-03-13 06:56:05.9528] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=536192, elapsed=5.994
[10-03-13 06:56:05.9997] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=531260, elapsed=6.022
[10-03-13 06:56:06.9631] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=500188, elapsed=6.982
[10-03-13 06:56:07.9651] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=512928, elapsed=7.999
[10-03-13 06:56:08.9596] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=523388, elapsed=8.995
[10-03-13 06:56:09.9660] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=537216, elapsed=9.985
[10-03-13 06:56:10.9762] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=498496, elapsed=11.002
[10-03-13 06:56:11.0126] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=542876, elapsed=11.032
[10-03-13 06:56:11.9780] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=514720, elapsed=11.990
[10-03-13 06:56:12.9669] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=523584, elapsed=13.014
[10-03-13 06:56:13.9660] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=538528, elapsed=14.002
[10-03-13 06:56:14.9733] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=545860, elapsed=14.993
[10-03-13 06:56:15.9646] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=509504, elapsed=16.015
[10-03-13 06:56:15.9960] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=504928, elapsed=16.041
[10-03-13 06:56:16.9735] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=520000, elapsed=17.005
[10-03-13 06:56:17.9685] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=540476, elapsed=17.995
[10-03-13 06:56:18.9788] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=498172, elapsed=19.012
[10-03-13 06:56:19.9660] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=508928, elapsed=20.002
[10-03-13 06:56:20.9775] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=527196, elapsed=20.990
[10-03-13 06:56:21.0086] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=521212, elapsed=21.024
[10-03-13 06:56:21.9764] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=515072, elapsed=22.013
[10-03-13 06:56:22.9789] Slim::Networking::Slimproto::_stat_handler (803) 00:17:31:7b:88:7b: STAT-STMt: fullness=0, output_fullness=518140, elapsed=23.003
[10-03-13 06:56:23.1708] Slim::Player::StreamingController::stop (1951) 00:17:31:7b:88:7b
[10-03-13 06:56:23.1721] Slim::Player::Squeezebox::stream (980) strm-q
[10-03-13 06:56:23.1730] Slim::Player::StreamingController::_Stop (607) Song queue is now 0
[10-03-13 06:56:23.1744] Slim::Player::StreamingController::_setPlayingState (2222) new playing state STOPPED
[10-03-13 06:56:23.1817] Slim::Player::StreamingController::_setStreamingState (2235) new streaming state IDLE
[10-03-13 06:56:23.1830] Slim::Player::Source::playmode (93) 00:17:31:7b:88:7b: Current playmode: stop

---
